// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:nothing/model/user_info_model.dart';
import 'package:nothing/generated/json/user_info_model_helper.dart';
import 'package:nothing/model/collect_model.dart';
import 'package:nothing/generated/json/collect_model_helper.dart';
import 'package:nothing/model/message_model.dart';
import 'package:nothing/generated/json/message_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case UserInfoModel:
				return userInfoModelFromJson(data as UserInfoModel, json) as T;
			case CollectModel:
				return collectModelFromJson(data as CollectModel, json) as T;
			case MessageModel:
				return messageModelFromJson(data as MessageModel, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserInfoModel:
				return userInfoModelToJson(data as UserInfoModel);
			case CollectModel:
				return collectModelToJson(data as CollectModel);
			case MessageModel:
				return messageModelToJson(data as MessageModel);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserInfoModel).toString()){
			return UserInfoModel().fromJson(json);
		}
		if(type == (CollectModel).toString()){
			return CollectModel().fromJson(json);
		}
		if(type == (MessageModel).toString()){
			return MessageModel().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserInfoModel>[] is M){
			return data.map<UserInfoModel>((e) => UserInfoModel().fromJson(e)).toList() as M;
		}
		if(<CollectModel>[] is M){
			return data.map<CollectModel>((e) => CollectModel().fromJson(e)).toList() as M;
		}
		if(<MessageModel>[] is M){
			return data.map<MessageModel>((e) => MessageModel().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}